<?xml version="1.0" encoding="UTF-8"?><record_update table="sysauto_script">
    <sysauto_script action="INSERT_OR_UPDATE">
        <active>false</active>
        <business_calendar/>
        <can_iterate>false</can_iterate>
        <condition/>
        <conditional>false</conditional>
        <entered_time/>
        <name>SCOPED Kuna Cloud Refresh Google API Access Token</name>
        <offset/>
        <offset_type>0</offset_type>
        <run_as/>
        <run_as_tz/>
        <run_dayofmonth>1</run_dayofmonth>
        <run_dayofweek>1</run_dayofweek>
        <run_period>1970-01-01 00:55:00</run_period>
        <run_start>2020-10-01 21:24:10</run_start>
        <run_time>1969-12-31 23:55:00</run_time>
        <run_type>periodically</run_type>
        <script><![CDATA[/*This is the only information you need before hand*/
var Application_Registry_Name = 'Google API';

/*Attempt to find the existing Refresh Token*/
var refreshToken = '';
var grOC = new GlideRecord('oauth_credential');
grOC.addEncodedQuery('type=refresh_token^peer.name='+Application_Registry_Name);
grOC.query();
if(grOC.next()){
	var Encrypter = new GlideEncrypter();  
	refreshToken = Encrypter.decrypt(grOC.token_received);  
}

/*If a valid Refresh Token Exists, then request the new Access Token*/
if(JSUtil.notNil(refreshToken)){
	//GlideOAuthClientRequest
	var clientRequest = new sn_auth.GlideOAuthClientRequest();
	clientRequest.setGrantType('refresh_token');
	clientRequest.setRefreshToken(refreshToken);
	//GlideOAuthClient
	var client = new sn_auth.GlideOAuthClient();
	//GlideOAuthClientResponse
	var tokenResponse = client.requestTokenByRequest(Application_Registry_Name , clientRequest);
	//GlideOAuthToken
	var token = tokenResponse.getToken();

	gs.log('Existing Refresh Token: '+refreshToken);
	gs.log("New Access Token:" + token.getAccessToken());
	gs.log("New Access Token Expires In:" + token.getExpiresIn()+' Seconds');
	var grOCT = new GlideRecord('oauth_credential');
	grOCT.addEncodedQuery('type=access_token^peer.name='+Application_Registry_Name);
	grOCT.query();
	if(grOCT.next()){
		grOCT.token_received = token.getAccessToken();
		var now = new GlideDateTime();

		var expiresInSeconds = token.getExpiresIn();
		gs.info("expiresInSeconds " + expiresInSeconds);

		var gdt = new GlideDateTime();
		gdt.addSeconds(expiresInSeconds);
		gdt.addSeconds(60 * 120); // add 2 hours

		grOCT.expires = gdt.getValue();
		grOCT.update();

	}

}else{
	gs.log('Unable to find an existing refresh token');
}]]></script>
        <source_filter/>
        <source_table/>
        <sys_class_name>sysauto_script</sys_class_name>
        <sys_created_by>marek.polasik</sys_created_by>
        <sys_created_on>2020-10-01 21:24:51</sys_created_on>
        <sys_id>ea5b4b92dbab101006fc7b60399619e9</sys_id>
        <sys_mod_count>7</sys_mod_count>
        <sys_name>SCOPED Kuna Cloud Refresh Google API Access Token</sys_name>
        <sys_package display_value="Kuna Cloud" source="x_84446_kuna_cloud">603955a1db9f941006fc7b6039961984</sys_package>
        <sys_policy/>
        <sys_scope display_value="Kuna Cloud">603955a1db9f941006fc7b6039961984</sys_scope>
        <sys_update_name>sysauto_script_ea5b4b92dbab101006fc7b60399619e9</sys_update_name>
        <sys_updated_by>marek.polasik</sys_updated_by>
        <sys_updated_on>2020-10-01 21:31:30</sys_updated_on>
        <time_zone/>
        <upgrade_safe>false</upgrade_safe>
    </sysauto_script>
</record_update>
